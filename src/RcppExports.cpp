// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GetQuantizationError
List GetQuantizationError(NumericMatrix dist_cross);
RcppExport SEXP _SomQualityCheck_GetQuantizationError(SEXP dist_crossSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_cross(dist_crossSEXP);
    rcpp_result_gen = Rcpp::wrap(GetQuantizationError(dist_cross));
    return rcpp_result_gen;
END_RCPP
}
// GetTopographicError
List GetTopographicError(NumericMatrix dist_cross, int xdim);
RcppExport SEXP _SomQualityCheck_GetTopographicError(SEXP dist_crossSEXP, SEXP xdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_cross(dist_crossSEXP);
    Rcpp::traits::input_parameter< int >::type xdim(xdimSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTopographicError(dist_cross, xdim));
    return rcpp_result_gen;
END_RCPP
}
// GetTopographicFunction
List GetTopographicFunction(NumericMatrix dist_cross, int xdim);
RcppExport SEXP _SomQualityCheck_GetTopographicFunction(SEXP dist_crossSEXP, SEXP xdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_cross(dist_crossSEXP);
    Rcpp::traits::input_parameter< int >::type xdim(xdimSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTopographicFunction(dist_cross, xdim));
    return rcpp_result_gen;
END_RCPP
}
// GetNeighborhoodPreservation
List GetNeighborhoodPreservation(NumericMatrix dist_data, NumericMatrix dist_proj, int k);
RcppExport SEXP _SomQualityCheck_GetNeighborhoodPreservation(SEXP dist_dataSEXP, SEXP dist_projSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_data(dist_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_proj(dist_projSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(GetNeighborhoodPreservation(dist_data, dist_proj, k));
    return rcpp_result_gen;
END_RCPP
}
// GetVMeasure
List GetVMeasure(IntegerVector labels, IntegerVector clusters, double beta);
RcppExport SEXP _SomQualityCheck_GetVMeasure(SEXP labelsSEXP, SEXP clustersSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(GetVMeasure(labels, clusters, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SomQualityCheck_GetQuantizationError", (DL_FUNC) &_SomQualityCheck_GetQuantizationError, 1},
    {"_SomQualityCheck_GetTopographicError", (DL_FUNC) &_SomQualityCheck_GetTopographicError, 2},
    {"_SomQualityCheck_GetTopographicFunction", (DL_FUNC) &_SomQualityCheck_GetTopographicFunction, 2},
    {"_SomQualityCheck_GetNeighborhoodPreservation", (DL_FUNC) &_SomQualityCheck_GetNeighborhoodPreservation, 3},
    {"_SomQualityCheck_GetVMeasure", (DL_FUNC) &_SomQualityCheck_GetVMeasure, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SomQualityCheck(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
